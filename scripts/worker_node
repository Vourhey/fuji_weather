#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third party
import json
from http.client import HTTPConnection
import socks
from urllib.parse import urlparse

# ROS
import rospy
from std_msgs.msg import String

# AIRA
from ipfs_common.msg import Multihash
from ethereum_common.msg import Address
from robonomics_msgs.msg import Demand, Result
from ipfs_common.ipfs_rosbag import IpfsRosBag


class WorkerNode:
    def __init__(self):
        rospy.init_node('worker')
        rospy.loginfo('Launching worker node...')

        rospy.Subscriber('/liability/infochan/incoming/demand', Demand, self.on_new_demand)

        self.result = rospy.Publisher('/liability/infochan/eth/signing/result', Result, queue_size=128)

        rospy.loginfo('Worker node launched.')

    def on_new_demand(self, msg):
        rospy.loginfo('Incoming demand:\n%s', str(msg))
        if msg.model.multihash == rospy.get_param('~model'):
            # account of sender
            sender_account = msg.sender
            rospy.loginfo('Demand sender: {}'.format(sender_account.address))

            result_msg = self.make_result(sender_account, self.do_work())

            self.result.publish(result_msg)

    def make_result(self, sender_account: Address, data_msg: Multihash) -> Result:
        res = Result()
        res.success = True
        res.liability = sender_account
        res.result = data_msg

        return res

    def do_work(self):
        api_key = rospy.get_param("~openweathermap_api_key")
        username = rospy.get_param("~username")
        password = rospy.get_param("~password")
        c = HTTPConnection("proxy.aira.life", 8888)
        c.set_tunnel("api.openweathermap.org")
        c.sock = socks.socksocket()
        c.sock.set_proxy(socks.PROXY_TYPE_SOCKS5, "proxy.aira.life", 8888, username=username, password=password)
        c.sock.connect(("api.openweathermap.org", ))
        c.request("GET", "/data/2.5/weather?q=Fuji,jp&units=metric&appid=" + api_key)
        res = c.getresponse()

        d = json.loads(res.read().decode('utf-8'))

        topics = {
                "/data": [String(json.dumps( d["main"] ))]
                }
        bag = IpfsRosBag(messages=topics)

        return bag.multihash

    def spin(self):
        rospy.spin()


if __name__ == '__main__':
    WorkerNode().spin()
